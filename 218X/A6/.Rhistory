BLD = "6",
TEN = 3,
MV = 1,
PUMA = 4
),
type = "response")
predict(logit_model,
data.frame(
BLD = "6",
TEN = "3",
MV = "1",
PUMA = "4"
),
type = "response")
predict(logit_model,
data.frame(
BLD = "6",
TEN = "3",
MV = "1",
PUMA = "07504"
),
type = "response")
# choose random record (17th in my df)
predict(logit_model,
data.frame(
BLD = "6",
TEN = "3",
MV = "1",
PUMA = "07504"
),
type = "response")
# factorize BLD, TEN, MV, PUMA
sf_pums_factorized <- sf_pums_clean %>%
mutate(
units = BLD %>%
factor(
levels = sf_pums_clean$BLD %>%
unique() %>%
as.numeric() %>%
sort()),
tenure = TEN %>%
factor(
levels = sf_pums_clean$TEN %>%
unique() %>%
as.numeric() %>%
sort()),
moveindate = MV %>%
factor(
levels = sf_pums_clean$MV %>%
unique() %>%
as.numeric() %>%
sort()),
pumacode = PUMA %>%
factor(
levels = sf_pums_clean$PUMA %>%
unique() %>%
as.numeric() %>%
sort())
)
View(sf_pums_clean)
View(sf_pums_factorized)
?factor()
levels = sf_pums_clean$PUMA
levels = sf_pums_clean$PUMA %>%
unique()
levels = sf_pums_clean$PUMA %>%
unique() %>%
as.numeric()
levels = sf_pums_clean$PUMA %>%
unique() %>%
as.numeric() %>%
sort()
factor(
levels = sf_pums_clean$PUMA %>%
unique() %>%
as.numeric() %>%
sort()
)
View(sf_pums_factorized)
factor(sf_pums_clean$PUMA)
# factorize BLD, TEN, MV, PUMA
sf_pums_factorized <- sf_pums_clean %>%
mutate(
units = BLD %>%
factor(
levels = sf_pums_clean$BLD %>%
unique() %>%
as.numeric() %>%
sort()),
tenure = TEN %>%
factor(
levels = sf_pums_clean$TEN %>%
unique() %>%
as.numeric() %>%
sort()),
moveindate = MV %>%
factor(
levels = sf_pums_clean$MV %>%
unique() %>%
as.numeric() %>%
sort()),
pumacode = PUMA %>%
factor(x = character(),
levels = sf_pums_clean$PUMA %>%
unique() %>%
# as.numeric() %>%
sort()
)
)
# factorize BLD, TEN, MV, PUMA
sf_pums_factorized <- sf_pums_clean %>%
mutate(
units = BLD %>%
factor(
levels = sf_pums_clean$BLD %>%
unique() %>%
as.numeric() %>%
sort()),
tenure = TEN %>%
factor(
levels = sf_pums_clean$TEN %>%
unique() %>%
as.numeric() %>%
sort()),
moveindate = MV %>%
factor(
levels = sf_pums_clean$MV %>%
unique() %>%
as.numeric() %>%
sort()),
pumacode = PUMA %>%
factor(
levels = sf_pums_clean$PUMA %>%
unique() %>%
# as.numeric() %>%
sort()
)
)
8
2
3
3
3
3
33
View(sf_pums_factorized)
# factorize BLD, TEN, MV, PUMA
sf_pums_factorized <- sf_pums_clean %>%
mutate(
units = BLD %>%
factor(
levels = sf_pums_clean$BLD %>%
unique() %>%
as.numeric() %>%
sort()),
tenure = TEN %>%
factor(
levels = sf_pums_clean$TEN %>%
unique() %>%
as.numeric() %>%
sort()),
moveindate = MV %>%
factor(
levels = sf_pums_clean$MV %>%
unique() %>%
as.numeric() %>%
sort()),
pumacode = PUMA %>%
factor(
levels = sf_pums_clean$PUMA %>%
unique() %>%
# as.numeric() %>%
sort()
) %>% sub('.', '')
)
# factorize BLD, TEN, MV, PUMA
sf_pums_factorized <- sf_pums_clean %>%
mutate(
units = BLD %>%
factor(
levels = sf_pums_clean$BLD %>%
unique() %>%
as.numeric() %>%
sort()),
tenure = TEN %>%
factor(
levels = sf_pums_clean$TEN %>%
unique() %>%
as.numeric() %>%
sort()),
moveindate = MV %>%
factor(
levels = sf_pums_clean$MV %>%
unique() %>%
as.numeric() %>%
sort()),
pumacode = PUMA %>%
factor(
levels = sf_pums_clean$PUMA %>%
unique() %>%
# as.numeric() %>%
sort() %>% sub('.', '')
)
)
pumacode = '07503'
pumacode
pumacode[2:5]
pumacode[2]
pumacode(2)
substring(pumacode,2,5)
# factorize BLD, TEN, MV, PUMA
sf_pums_factorized <- sf_pums_clean %>%
mutate(
units = BLD %>%
factor(
levels = sf_pums_clean$BLD %>%
unique() %>%
as.numeric() %>%
sort()),
tenure = TEN %>%
factor(
levels = sf_pums_clean$TEN %>%
unique() %>%
as.numeric() %>%
sort()),
moveindate = MV %>%
factor(
levels = sf_pums_clean$MV %>%
unique() %>%
as.numeric() %>%
sort()),
pumacode = PUMA %>%
factor(
levels = sf_pums_clean$PUMA %>%
unique() %>%
# as.numeric() %>%
sort()),
pumacode = substring(pumacode, 2, 5)
)
View(sf_pums_factorized)
# factorize BLD, TEN, MV, PUMA
sf_pums_factorized <- sf_pums_clean %>%
mutate(
units = BLD %>%
factor(
levels = sf_pums_clean$BLD %>%
unique() %>%
as.numeric() %>%
sort()),
tenure = TEN %>%
factor(
levels = sf_pums_clean$TEN %>%
unique() %>%
as.numeric() %>%
sort()),
moveindate = MV %>%
factor(
levels = sf_pums_clean$MV %>%
unique() %>%
as.numeric() %>%
sort()),
pumacode = PUMA %>%
factor(
levels = sf_pums_clean$PUMA %>%
unique() %>%
# as.numeric() %>%
sort()),
pumacode = as.factor(substring(pumacode, 2, 5))
)
logit_model <- glm(
leadrisk ~ BLD + TEN + MV + PUMA,
family = quasibinomial(),
data = sf_pums_factorized
)
summary(logit_model)
View(logit_model)
logit_model <- glm(
# leadrisk ~ BLD + TEN + MV + PUMA,
leadrisk ~ units + tenure + moveindate + pumacode,
family = quasibinomial(),
data = sf_pums_factorized
)
summary(logit_model)
# transform to normal odds bw 0 to 1
exp(coef(logit_model))
# cont'd
exp(coef(logit_model))/(exp(coef(logit_model))+1)
?sample_n
bih = sf_pums_factorized
sample_n(bih)
sample_n(bih, 1)
sample_n(bih, 1)
sample_n(bih, 1)
sample_n(bih, 1)
sample_n(bih, 1)
sample_n(bih, 1)
sample_n(bih, 1)
sample_n(bih, 1)
sample_n(bih, 1)
sample_n(bih, 1)
sample_n(bih, 1)
sample_n(bih, 1)
sample_n(bih, 1)
sample_n(bih, 1)
sample_n(bih, 1)
sample_n(bih, 1)
sample_n(bih, 1)
# get random row
random_row <- sample_n(sf_pums_factorized)
# get random row
random_row <- sample_n(sf_pums_factorized, 1)
View(random_row)
?predict
?predict()
# predict based on random row
predict(logit_model, random_row)
# predict based on random row
predict(logit_model, random_row, type = "response")
# predict based on random row
predict(logit_model, random_row, type = "response")
# get random row
random_row <- sample_n(sf_pums_factorized, 1)
# predict based on random row
predict(logit_model, random_row, type = "response")
# get random row
random_row <- sample_n(sf_pums_factorized, 1)
# predict based on random row
predict(logit_model, random_row, type = "response")
predict(logit_model,
data.frame(
BLD = "6",
TEN = "3",
MV = "1",
PUMA = "07504"
),
type = "response")
# predict based on random row
predict(logit_model, random_row, type = "response")
sum(sf_pums_factorized$leadrisk)
37/2264
# predict based on random row
predict(logit_model, random_row, type = "response")
predict(logit_model,
data.frame(
BLD = "6",
TEN = "3",
MV = "1",
PUMA = "07504"
),
type = "response")
# get random row
random_row <- sample_n(sf_pums_factorized, 1)
# predict based on random row
predict(logit_model, random_row, type = "response")
# get random row
random_row <- sample_n(sf_pums_factorized, 1)
# predict based on random row
predict(logit_model, random_row, type = "response")
# get random row
random_row <- sample_n(sf_pums_factorized, 1)
# predict based on random row
predict(logit_model, random_row, type = "response")
# get random row
random_row <- sample_n(sf_pums_factorized, 1)
# predict based on random row
predict(logit_model, random_row, type = "response")
# get random row
random_row <- sample_n(sf_pums_factorized, 1)
# predict based on random row
predict(logit_model, random_row, type = "response")
# get random row
random_row <- sample_n(sf_pums_factorized, 1)
# predict based on random row
predict(logit_model, random_row, type = "response")
# split data randomly 80/20 train/test
sample <- sample(
c(TRUE, FALSE),
nrow(bay_pums_language),
replace = T,
prob = c(0.8,0.2)
)
View(bay_pums_language)
sum(sample == T)
sum(sample == F)
1 = sum(sample == T)
one <- sum(sample ==T)
one
two <- sum(sample == T)
two
sum(one, two)
two = sum(sample == F)
two
sum(one, two)
three = sum(one, two)
three
one / three
two / three
train <- bay_pums_language[sample, ]
test <- bay_pums_language[!sample, ]
# train dat model
train_design <- svrepdesign(
data = train,
type = "ACS",
repweights = bay_pums_language_wts[sample, ],
weights = ~as.numeric(PWGTP)
)
bay_pums_language_wts <- pums_2019_1yr_wts %>%
mutate(AGEP = bay_pums$AGEP) %>%
filter(as.numeric(AGEP) >= 5) %>%
select(starts_with("PWGTP"))
bay_county_names <-
c(
"Alameda",
"Contra Costa",
"Marin",
"Napa",
"San Francisco",
"San Mateo",
"Santa Clara",
"Solano",
"Sonoma"
)
bay_counties <-
counties("CA", cb = T, progress_bar = F) %>%
filter(NAME %in% bay_county_names)
bay_pumas <-
ca_pumas %>%
st_centroid() %>%
.[bay_counties, ] %>%
st_drop_geometry() %>%
left_join(ca_pumas %>% select(GEOID10)) %>%
st_as_sf()
bay_pums <-
pums_2019_1yr %>%
mutate(
PUMA = str_pad(public_use_microdata_area,5,"left","0")
) %>%
filter(PUMA %in% bay_pumas$PUMACE10)
bay_pums <-
pums_2019_1yr %>%
mutate(
PUMA = str_pad(public_use_microdata_area,5,"left","0")
) %>%
filter(PUMA %in% bay_pumas$PUMACE10)
```{r CLEAN RECODE AND FILTER VARS}
bay_pums_regression <- bay_pums %>%
mutate(
college = ifelse(
as.numeric(SCHL) >= 18,
1,
0
),
income = as.numeric(PINCP)
) %>%
filter(
as.numeric(AGEP) >= 25,
income > 0
)
bay_pums <-
pums_2019_1yr %>%
mutate(
PUMA = str_pad(public_use_microdata_area,5,"left","0")
) %>%
filter(PUMA %in% bay_pumas$PUMACE10)
bay_pums_regression <- bay_pums %>%
mutate(
college = ifelse(
as.numeric(SCHL) >= 18,
1,
0
),
income = as.numeric(PINCP)
) %>%
filter(
as.numeric(AGEP) >= 25,
income > 0
)
rm(sf_pums_old_bldgs)
rm(sf_pums_filter_test)
rm(sf_pums_clean)
library(mapview)
# create leadrisk variable
sf_pums_clean <- sf_pums %>%
mutate(
YBL = as.numeric(YBL),
AGEP = as.numeric(AGEP),
HINCP = as.numeric(HINCP)
) %>%
filter(
YBL %in% c(1, 2, 3)) %>%
group_by(SERIALNO) %>%
summarise(
AGEP = min(AGEP),
WGTP = first(WGTP),
YBL = first(YBL),
BLD = first(BLD),
TEN = first(TEN),
MV = first(MV),
HINCP = first(HINCP),
PUMA = first(PUMA)
) %>%
mutate(leadrisk = ifelse(
HINCP < 90000 & AGEP < 6,
1, 0
))
logit_model <- glm(
# leadrisk ~ BLD + TEN + MV + PUMA,
leadrisk ~ units + tenure + moveindate + pumacode,
family = quasibinomial(),
data = sf_pums_factorized
)
summary(logit_model)
